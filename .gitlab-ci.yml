default:
  image: gcc:latest

stages:
  - check_format 
  - build
  - static_analysis
  - build_tests
  - run_tests
  - measure_coverage
  - deploy

before_script:
  - apt update && apt upgrade -y
  - apt install -y cmake
  - apt install -y libwayland-dev libxkbcommon-dev xorg-dev

check_clang_format:
  stage: check_format
  before_script:
    - apt update && apt upgrade -y
    - apt install -y clang-format
  script:
    - find src libs \( -iname '*.cpp' -o -iname '*.h' -o -iname '*.hpp' \) ! -path "src/gui.cpp" | xargs clang-format --dry-run --Werror --style=file
  dependencies: []

build_linux_release_gcc:
  stage: build
  script:
    - echo "An example script section."
    - mkdir build
    - cd build
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - cmake --build . --config Release
  # Disable artifacts downloading from previous stages. It's downloading by default.
  dependencies: []

build_linux_debug_gcc:
  stage: build
  script:
    - echo "An example script section."
    - mkdir build
    - cd build
    - cmake cmake -DBLG_ENABLE_TESTS=ON -DCMAKE_BUILD_TYPE=Debug ..
    - cmake --build . --config Debug
  # Disable artifacts downloading from previous stages. It's downloading by default.
  dependencies: []
  artifacts:
    untracked: true

static_analysis_debug_gcc:
  stage: static_analysis
  before_script:
    - apt update && apt upgrade -y
    - apt install -y cmake
    - apt install -y libwayland-dev libxkbcommon-dev xorg-dev
    - apt install -y valgrind
  script:
    - cd build
    - valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./libs/blgt/tests/blgt_test
    - valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./libs/blgd/tests/blgd_test
    - valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./tests/blg_test
  dependencies:
    - build_linux_debug_gcc

build_tests_linux_gcc_debug:
  stage: build_tests
  script:
    - mkdir build
    - cd build
    - cmake -DBLG_ENABLE_TESTS=ON -DBLG_ENABLE_TESTS_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug ..
    - cmake --build . --config Debug
  dependencies: []
  artifacts:
    untracked: true

run_tests_linux_gcc_debug:
  stage: run_tests
  script:
    - cd build
    - ctest
  artifacts:
    untracked: true

measure_tests_coverage_linux_gcc_debug:
  stage: measure_coverage
  before_script:
    - apt update && apt upgrade -y
    - apt install -y lcov
  script:
    - cd build
    - lcov --directory . --capture --output-file coverage.info
    - lcov --remove coverage.info "*/c++/*" -o filtered.info
    - genhtml --demangle-cpp -o coverage filtered.info --prefix $(pwd | cut -d"/" -f1-4) > report_log.txt
    - cat report_log.txt
    - chmod u+r+x ../scripts/check_coverage.sh
    - ../scripts/check_coverage.sh report_log.txt $MIN_COVERAGE
  coverage: '/lines[^\:]+\:\s*([\d\.]+)/'
  artifacts:
    when: always
    name: "coverage"
    paths:
      - build/coverage/
